<?php

/**
 * @file
 * AM.net Donations module.
 */

use Drupal\am_net_donations\Event\DonationEvent;
use Drupal\am_net_donations\Event\DonationEvents;
use Drupal\commerce_price\Price;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function am_net_donations_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.am_net':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("Defines common functionality for VSCPA Donations workflow.") . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'commerce_product'.
 */
function am_net_donations_form_commerce_product_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
  $product = $form_state->getBuildInfo()['callback_object']->getEntity();
  // Adds functionality for setting the default donation products.
  if (in_array($product->bundle(), ['donation', 'membership_donation'])) {
    $types = [
      'pac' => 'PAC',
      'ef' => 'EF',
    ];
    foreach ($types as $key => $type) {
      $config_key = "default_{$product->bundle()}_product_{$key}";
      /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
      $product = $form_state->getBuildInfo()['callback_object']->getEntity();
      $default_uuid = \Drupal::config('am_net_donations.settings')
        ->get($config_key);
      $form[$config_key] = [
        '#type' => 'checkbox',
        '#title' => t('Default'),
        '#description' => t('Make this the default :bundle product (:type)', [
          ':bundle' => $product->bundle(),
          ':type' => $type,
        ]),
        '#default_value' => ($product->uuid() === $default_uuid),
        '#weight' => 100,
        '#states' => [
          'visible' => [
            'select[name="field_donation_destination"]' => ['value' => $type],
          ],
        ],
      ];
    }
    $form['actions']['submit']['#submit'][] = 'am_net_donations_default_donation_product_form_submit';
  }
}

/**
 * Submit handler to set the default donation product(s).
 *
 * @param array $form
 *   The product form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The product form state.
 */
function am_net_donations_default_donation_product_form_submit(array $form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
  $product = $form_state->getBuildInfo()['callback_object']->getEntity();
  $types = [
    'pac' => 'PAC',
    'ef' => 'EF',
  ];
  foreach ($types as $key => $type) {
    $destination = $form_state->getValue('field_donation_destination')[0]['value'];
    $config_key = "default_{$product->bundle()}_product_{$key}";
    if ($form_state->getValue($config_key) && $destination == $type) {
      \Drupal::configFactory()->getEditable('am_net_donations.settings')
        ->set($config_key, $product->uuid())
        ->save();
      drupal_set_message(t('The product %product has been successfully set as the default :bundle product (:type).', [
        '%product' => $product->label(),
        ':bundle' => $product->bundle(),
        ':type' => $type,
      ]));
    }
  }
}

/**
 * Submit Donation Pane.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function am_net_donations_donation_pane_form_submit(array &$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $account = \Drupal::currentUser();
  // Check PAC.
  $pac = new Price($values['donations']['pac']['number'] ?: 0, $values['donations']['pac']['currency_code']);
  if (!$pac->isZero()) {
    $event = new DonationEvent($account, $pac, FALSE, 'PAC', 'I');
    \Drupal::service('event_dispatcher')->dispatch(DonationEvents::SUBMIT_MEMBERSHIP_DONATION, $event);
  }
  // Check EF.
  $ef = new Price($values['donations']['ef']['number'] ?: 0, $values['donations']['ef']['currency_code']);
  if (!$ef->isZero()) {
    $event = new DonationEvent($account, $ef, FALSE, 'EF', 'I');
    \Drupal::service('event_dispatcher')->dispatch(DonationEvents::SUBMIT_MEMBERSHIP_DONATION, $event);
  }
}
