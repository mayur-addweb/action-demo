<?php

/**
 * @file
 * AM.net membership sync module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\licensing\Entity\LicenseInterface;
use Drupal\am_net_membership\BillingClass\BillingClassCodeInterface;

// Default licensed entity.
define('AM_NET_MEMBERSHIP_LICENSED_ENTITY', 66794);
define('AM_NET_MEMBERSHIP_FIRM_OTHER', '171');
define('AM_NET_MEMBERSHIP_JOIN_LADING_SLUG', 'join-vscpa-today');

/**
 * Implements hook_theme().
 */
function am_net_membership_theme($existing, $type, $theme, $path) {
  return [
    'my_membership' => [
      'variables' => [
        'user_picture' => NULL,
        'user_full_name' => NULL,
        'member_since' => NULL,
        'member_status' => NULL,
        'account_dashboard_url' => NULL,
        'my_cpe_url' => NULL,
        'edit_account_url' => NULL,
        'uid' => NULL,
      ],
    ],
    'modal_dues_payment_plan_enroll' => [
      'variables' => [
        'ef_contribution_amount' => NULL,
        'pac_contribution_amount' => NULL,
        'end_date_of_current_fiscal_year' => NULL,
        'base_membership_price' => NULL,
        'user_id' => NULL,
        'balance' => NULL,
        'plan_start_date' => NULL,
        'plan_end_date' => NULL,
        'pac_donation' => NULL,
        'ef_donation' => NULL,
        'annual_membership_dues' => NULL,
        'plan_months' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_field_group_build_pre_render_alter().
 */
function am_net_membership_field_group_build_pre_render_alter(&$element) {
  if (isset($element['group_certifications_information'])) {
    // Condition Fields Logic.
    $element['group_certifications_information']['#states'] = [
      'visible' => [
        ':input[name="field_member_select"]' => ['value' => BillingClassCodeInterface::MEMBERSHIP_SELECTION_LICENSED_CPA],
      ],
    ];
  }
  if (isset($element['group_your_place_of_employment']['field_work_address'])) {
    // Condition Fields Logic.
    $element['group_your_place_of_employment']['field_work_address']['#states'] = [
      'visible' => [
        [
          ':input[name="field_firm_other[0][value]"]' => ['filled' => TRUE],
        ],
      ],
    ];
  }
}

/**
 * Implements hook_form_alter().
 */
function am_net_membership_form_alter(&$form, &$form_state, $form_id) {
  $employment_information_forms = [
    'user_update_profile_employment_information_form',
  ];
  // Alter User Register form.
  $alter_term_conditions_field = FALSE;
  if ($form_id == 'user_register_form') {
    // Change title Email address.
    $form['account']['mail']['#title'] = t('Primary email');
    $form['#attributes']['class'][] = 'form-inline';
    // Hide legend title.
    $form['field_member_select']['#attributes']['class'][] = 'field--hide-legend';
    hide($form['language']);
    hide($form['field_user_image']);
    hide($form['timezone']);
    $form['actions']['submit']['#attributes']['class'][] = 'btn-purple';
    if (isset($form['field_term_conditions']['widget']['value'])) {
      $form['field_term_conditions']['widget']['value']['#wrapped_modal'] = TRUE;
      $title = $form['field_term_conditions']['widget']['value']['#title'];
      $form['field_term_conditions']['widget']['value']['#title'] = "<a data-toggle='modal' data-target='#form-element--modal'>{$title}</a>";
    }
    $alter_term_conditions_field = TRUE;
  }
  elseif ($form_id == 'user_login_form') {
    $current_uri = \Drupal::request()->getRequestUri();
    $landing = AM_NET_MEMBERSHIP_JOIN_LADING_SLUG;
    if (strpos($current_uri, $landing) !== FALSE) {
      $form['actions']['submit']['#value'] = t('Renew Today');
      $form['header'] = [
        '#type' => 'item',
        '#markup' => "<strong>" . t('Use our quick and easy process to renew.') . "</strong>",
        '#weight' => -1,
        '#prefix' => "<div class='clearfix'>",
        '#suffix' => "</div>",
      ];
      $form['reset_password'] = [
        '#type' => 'item',
        '#markup' => "<a class='reset-password' href='/user/password?destination={$landing}'>Forgot Password?</a>",
      ];
    }
  }
  elseif (in_array($form_id, ['am_net_membership.application.membership_qualification'])) {
    $alter_term_conditions_field = TRUE;
  }
  elseif (($form_id == 'user_form') || in_array($form_id, $employment_information_forms)) {
    $alter_term_conditions_field = TRUE;
    $reset_work_address = FALSE;
    $reset_home_address = FALSE;
    /* @var \Drupal\user\UserInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();
    $route_name = \Drupal::routeMatch()->getRouteName();
    $is_user_edit_profile = ($route_name == 'am_net_user_profile.employment_information');
    if ($entity) {
      // Check if the user has firm linked.
      $field_name = 'field_firm';
      if (!$is_user_edit_profile && $entity->hasField($field_name)) {
        $firm = $entity->get($field_name)->getString();
        if (empty($firm)) {
          $reset_work_address = TRUE;
        }
        elseif ($firm != AM_NET_MEMBERSHIP_FIRM_OTHER) {
          $reset_work_address = TRUE;
        }
      }
      // Check if user has the field: Home address.
      $field_name = 'field_home_address';
      if ($entity->hasField($field_name)) {
        $home_address = $entity->get($field_name)->getString();
        $reset_home_address = (empty($home_address) || ($home_address == 'US'));
      }
    }
    // Reset work address.
    if ($reset_work_address && isset($form['field_work_address']['widget']['0']['address'])) {
      // Add Conditional logic for people with firm linked.
      $address = &$form['field_work_address']['widget']['0']['address'];
      // Reset values.
      $keys = array_keys($address['#default_value']);
      $address['#default_value'] = array_fill_keys($keys, NULL);
    }
    // Reset home address.
    if ($reset_home_address && isset($form['field_home_address']['widget']['0']['address'])) {
      // Add Conditional logic for people with firm linked.
      $address = &$form['field_home_address']['widget']['0']['address'];
      // Reset values.
      $keys = array_keys($address['#default_value']);
      $address['#default_value'] = array_fill_keys($keys, NULL);
    }
    // Hide Admin fields.
    $current_user_roles = \Drupal::currentUser()->getRoles();
    if (!in_array('administrator', $current_user_roles)) {
      hide($form['actions']['delete']);
      hide($form['account']['status']);
      hide($form['field_member_select']);
    }
  }
  elseif ($form_id == 'license_membership_edit_form') {
    // AM.net is the authority for updating the fields:
    // 1. MemberStatusCode.
    // 2. MemberTypeCode.
    // 3. DuesPaidThrough.
    $form['status']['widget']['#attributes']['readonly'] = 'readonly';
    $form['status']['widget']['#attributes']['disabled'] = 'disabled';
    $form['expires_automatically']['widget']['value']['#attributes']['readonly'] = 'readonly';
    $form['expires_automatically']['widget']['value']['#attributes']['disabled'] = 'disabled';
    $form['expiry']['widget']['0']['value']['#attributes']['readonly'] = 'readonly';
    $form['expiry']['widget']['0']['value']['#attributes']['disabled'] = 'disabled';
  }
  // Alter Terms & Conditions Field.
  if ($alter_term_conditions_field) {
    $field_name = 'field_term_conditions';
    $title = t('Terms & Conditions');
    $term_conditions_title = "I agree with the website <a data-toggle='modal' data-target='#form-element--modal'>{$title}</a> of service";
    if (isset($form[$field_name][$field_name])) {
      $form[$field_name][$field_name]['#wrapped_modal'] = TRUE;
      $form[$field_name][$field_name]['#title'] = $term_conditions_title;
    }
    if (isset($form[$field_name]['widget']['value'])) {
      $form[$field_name]['widget']['value']['#wrapped_modal'] = TRUE;
      $form[$field_name]['widget']['value']['#title'] = $term_conditions_title;
      $form[$field_name]['widget']['value']['#description_display'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'commerce_product'.
 */
function am_net_membership_form_commerce_product_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
  $product = $form_state->getBuildInfo()['callback_object']->getEntity();
  // Adds functionality for setting the default membership product.
  if ($product && ($product->bundle() === 'membership')) {
    $default_uuid = \Drupal::config('am_net_membership.settings')->get('default_membership_product');
    $form['default_membership_product'] = [
      '#type' => 'checkbox',
      '#title' => t('Default'),
      '#description' => t('Make this the default membership product'),
      '#default_value' => ($product->uuid() === $default_uuid),
      '#weight' => 100,
    ];
    $form['actions']['submit']['#submit'][] = 'am_net_membership_commerce_product_form_submit';
  }
  if ($product && ($product->bundle() === 'payment_plan_administrative_fee')) {
    $default_uuid = \Drupal::config('am_net_membership.settings')->get('default_payment_plan_admin_fee_product');
    $form['default_payment_plan_admin_fee_product'] = [
      '#type' => 'checkbox',
      '#title' => t('Default'),
      '#description' => t('Make this the default "Payment Plan Administrative Fee" product'),
      '#default_value' => ($product->uuid() === $default_uuid),
      '#weight' => 100,
    ];
    $form['actions']['submit']['#submit'][] = 'am_net_membership_commerce_product_form_submit';
  }
}

/**
 * Submit handler to set the default membership product.
 *
 * @param array $form
 *   The product form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The product form state.
 */
function am_net_membership_commerce_product_form_submit(array $form, FormStateInterface $form_state) {
  if ($default = $form_state->getValue('default_membership_product')) {
    /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
    $product = $form_state->getBuildInfo()['callback_object']->getEntity();
    \Drupal::configFactory()->getEditable('am_net_membership.settings')->set('default_membership_product', $product->uuid())->save();
    drupal_set_message(t('The product %product has been successfully set as the default membership product.', ['%product' => $product->label()]));
  }
  if ($default = $form_state->getValue('default_payment_plan_admin_fee_product')) {
    /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
    $product = $form_state->getBuildInfo()['callback_object']->getEntity();
    \Drupal::configFactory()->getEditable('am_net_membership.settings')->set('default_payment_plan_admin_fee_product', $product->uuid())->save();
    drupal_set_message(t('The product %product has been successfully set as the default  "Payment Plan Administrative Fee" product.', ['%product' => $product->label()]));
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function am_net_user_profile_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#wrapped_modal'])) {
    $suggestions[] = 'form_element__modal';
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function am_net_membership_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Change user register label.
  if (isset($data['tabs'][0]['user.register']['#link']['title'])) {
    $data['tabs'][0]['user.register']['#link']['title'] = t('Create Account');
  }
  // Change user edit label.
  if (isset($data['tabs'][0]['entity.user.edit_form']['#link']['title'])) {
    $data['tabs'][0]['entity.user.edit_form']['#link']['title'] = t('Update My Profile');
  }
  // Change user view label.
  if (isset($data['tabs'][0]['entity.user.canonical']['#link']['title'])) {
    $data['tabs'][0]['entity.user.canonical']['#link']['title'] = t('View Profile');
  }
}

/**
 * Implements hook_preprocess_fieldset().
 */
function am_net_membership_preprocess_fieldset(&$variables) {
  $variables['fieldset_format'] = 'inline';
  if (isset($variables['element']['#field_name'])) {
    $variables['field_name'] = $variables['element']['#field_name'];
    if (in_array($variables['field_name'], ['field_revoked_license', 'field_convicted_felon'])) {
      $variables['fieldset_format'] = 'full';
    }
  }
  $variables['fieldset_format_inline'] = ($variables['fieldset_format'] == 'inline');
  $variables['fieldset_format_full'] = ($variables['fieldset_format'] == 'full');
}

/**
 * Implements hook_preprocess_form_element_label().
 */
function am_net_membership_preprocess_form_element_label(&$variables) {
  $variables['field_id'] = isset($variables['element']['#id']) ? $variables['element']['#id'] : '';
}

/**
 * Implements hook_user_presave().
 */
function am_net_membership_user_presave(UserInterface $user) {
  // Check Membership Status: Every time a user profile is updated
  // it is necessary to validate the membership status.
  // Since that in this point the user can that not exist on the database yet,
  // we use pre-save operation because is not possible assigned licenses to
  // non-yet existing user.
  am_net_logger('Call am_net_membership_user_presave:checkMembershipStatusOnUserPreSave.', $user->id());
  \Drupal::service('am_net_membership.checker')->checkMembershipStatusOnUserPreSave($user);
}

/**
 * Implements hook_user_update().
 */
function am_net_membership_user_update(UserInterface $user) {
  // Check Membership Status: Every time a user profile is updated
  // it is necessary to validate the membership status.
  am_net_logger('Call am_net_membership_user_update:checkMembershipStatusOnUserPostSave.', $user->id());
  \Drupal::service('am_net_membership.checker')->checkMembershipStatusOnUserPostSave($user);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function am_net_membership_license_update(EntityInterface $entity) {
  if ($entity instanceof LicenseInterface) {
    // Check Membership Status: Every time a License is updated(Manually or
    // automatically) it is necessary to validate the membership status of the
    // owner of the license.
    am_net_logger('Call am_net_membership_license_update:checkMembershipLicenseStatus.', $entity->id());
    \Drupal::service('am_net_membership.checker')->checkMembershipLicenseStatus($entity);
  }
}

/**
 * Implements hook_cron().
 */
function am_net_membership_cron() {
  // Reset Dues Rates.
  \Drupal::service('am_net.client')->getDuesRates($reset = TRUE);
}

/**
 * Implements hook_user_login().
 */
function am_net_membership_user_login(EntityInterface $user) {
  $current_uri = \Drupal::request()->getRequestUri();
  $landing = AM_NET_MEMBERSHIP_JOIN_LADING_SLUG;
  if (strpos($current_uri, $landing) !== FALSE) {
    $current_request = \Drupal::service('request_stack')->getCurrentRequest();
    $current_destination = $current_request->query->get('destination');
    $has_destination_defined = !empty($current_destination) && !(strpos($current_destination, $landing) !== FALSE);
    if (!$has_destination_defined) {
      $destination = Url::fromRoute('am_net_membership.join_or_renew')->toString();
      $current_request->query->set('destination', $destination);
    }
  }
}

/**
 * Retrieves the names of member status matching specified conditions.
 *
 * @return array
 *   An associative array with the member status id as the key and the member
 *   status name as value.
 */
function am_net_membership_member_status_names() {
  $field_name = 'field_member_status';
  $field_def = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('user', 'user');
  if (!isset($field_def[$field_name])) {
    return [];
  }
  return options_allowed_values($field_def[$field_name]);
}
