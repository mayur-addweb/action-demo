<?php

/**
 * @file
 * Contains am_net_user_profile.module.
 */

use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\am_net_user_profile\Entity\Person;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\user\UserInterface;

// Location Type Educational Facility TID.
define('AM_NET_USER_PROFILE_LOCATION_TYPE_EDUCATIONAL_FACILITY_TID', 156);
define('AM_NET_USER_PROFILE_ADMIN_UID', 1);

/**
 * Implements hook_help().
 */
function am_net_user_profile_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the am_net_user_profile module.
    case 'help.page.am_net_user_profile':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("AM.net Tools user profile data Synchronization.") . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_user_login().
 */
function am_net_user_profile_user_login(EntityInterface $user) {
  am_net_logger('Call am_net_user_profile_user_login:pullUserProfileChanges.', $user->id());
  \Drupal::service('am_net_user_profile.manager')->pullUserProfileChanges($user);
}

/**
 * Implements hook_user_presave().
 */
function am_net_user_profile_user_presave(UserInterface $user) {
  // Clean & format user fields.
  am_net_logger('Call am_net_user_profile_user_presave:formatUserFields.', $user->id());
  $user_profile_manager = \Drupal::service('am_net_user_profile.manager');
  $user_profile_manager->formatUserFields($user);
  $user_original = isset($user->original) ? $user->original : NULL;
  if (!empty($user_original)) {
    $user_profile_manager->maybeChangeCartCustomerEmail($user_original, $user);
  }
}

/**
 * Implements hook_entity_insert().
 *
 * {@inheritdoc}
 */
function am_net_user_profile_entity_insert(EntityInterface $entity) {
  if (($entity instanceof UserInterface)) {
    $user_profile_manager = Drupal::service('am_net_user_profile.manager');
    if ($user_profile_manager->isUserAvailableForSync($entity)) {
      am_net_logger('Call am_net_user_profile_entity_insert:updatePersonRecordFormUser.', $entity->id());
      $user_profile_manager->updatePersonRecordFormUser($entity);
    }
  }
}

/**
 * Implements hook_user_update().
 */
function am_net_user_profile_user_update(UserInterface $user) {
  /** @var \Drupal\am_net_user_profile\UserProfileManager $user_profile_manager */
  $user_profile_manager = Drupal::service('am_net_user_profile.manager');
  if ($user_profile_manager->isUserAvailableForSync($user)) {
    am_net_logger('Call am_net_user_profile_user_update:updatePersonRecordFormUser.', $user->id());
    $user_profile_manager->updatePersonRecordFormUser($user);
  }
}

/**
 * Validates submission values in the user update form.
 */
function am_net_user_profile_user_remove_sync_lock_validate(array &$form, FormStateInterface $form_state) {
  // Get the submitted entity.
  /* @var \Drupal\user\UserInterface $user */
  if ($user = $form_state->getFormObject()->getEntity()) {
    $user_profile_manager = \Drupal::service('am_net_user_profile.manager');
    // Un-lock User Sync.
    $user_profile_manager->unlockUserSync($user);
    // Send update notification by email.
    $user_profile_manager->setSendUpdateConfirmationEmail($user, TRUE);
  }
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function am_net_user_profile_user_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  // When a user edits their user profile on the Drupal website, a web service
  // call should update the local Drupal data before displaying the form.
  $user_input = $form_state->getUserInput();
  $form_was_submitted = !empty($user_input);
  $supported_forms = [
    'default',
    'update_profile_general_member_information',
    'update_profile_employment_information',
    'update_profile_elected_officials',
    'update_profile_communications',
  ];
  if (in_array($operation, $supported_forms) && ($entity instanceof UserInterface) && !$form_was_submitted) {
    $user_profile_manager = Drupal::service('am_net_user_profile.manager');
    if ($user_profile_manager->isUserAvailableForSync($entity)) {
      am_net_logger('Call am_net_user_profile_user_prepare_form:pullUserProfileChanges.', $entity->id());
      $user_profile_manager->pullUserProfileChanges($entity);
    }
  }
}

/**
 * Implements hook_entity_form_display_alter().
 */
function am_net_user_profile_entity_form_display_alter(EntityFormDisplayInterface &$form_display, array $context) {
  if ($context['entity_type'] == 'user' && $context['bundle'] == 'user') {
    $user = \Drupal::currentUser();
    $logged_in = $user->isAuthenticated();
    $form_mode = $context['form_mode'];
    $current_uri = \Drupal::request()->getRequestUri();
    $is_membership_path = (strpos($current_uri, 'membership/') !== FALSE);
    $user_roles = $user->getRoles();
    $is_admin = in_array('administrator', $user_roles) || in_array('vscpa_administrator', $user_roles);
    /* @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $storage */
    $storage = \Drupal::service('entity_type.manager')->getStorage('entity_form_display');
    if ($is_admin) {
      if ($is_membership_path) {
        $form_mode_id = "user.user.{$form_mode}";
        $form_display = $storage->load($form_mode_id);
      }
      else {
        if ($form_mode == 'register') {
          $form_display = $storage->load('user.user.register');
        }
        else {
          // User the Default Form mode.
          $form_mode_id = ($form_mode == 'default') ? 'user.user.administrative_fields' : "user.user.{$form_mode}";
          $form_display = $storage->load($form_mode_id);
        }
      }
    }
    elseif ($logged_in) {
      if ($is_membership_path) {
        $form_mode_id = "user.user.{$form_mode}";
      }
      else {
        $form_mode_id = ($form_mode == 'default') ? 'user.user.update_profile_general_member_information' : "user.user.{$form_mode}";
      }
      // Use the Update Profile Form Mode.
      $form_display = $storage->load($form_mode_id);
    }
    else {
      // Use register Form Mode.
      $form_display = $storage->load('user.user.register');
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function am_net_user_profile_entity_type_alter(array &$entity_types) {
  // We get all form modes, for all entities, and loop through them.
  $form_modes = \Drupal::service('entity_display.repository')->getAllFormModes();
  foreach ($form_modes as $entity_type => $display_modes) {
    if ($entity_type !== 'user') {
      // We are only interested in adding a handler to the User entity.
      continue;
    }
    $user_type = $entity_types[$entity_type];
    $supported_form_modes = [
      'update_profile_website_account',
      'update_profile_general_member_information',
      'update_profile_elected_officials',
      'update_profile_employment_information',
      'update_profile_communications',
    ];
    foreach ($display_modes as $machine_name => $form_display) {
      if (!in_array($machine_name, $supported_form_modes)) {
        // We are only interested in adding this form mode to the definition.
        continue;
      }
      // We get the default handler class. It will be enough for us.
      $default_handler_class = $user_type->getHandlerClasses()['form']['default'];
      // We set the form class, keyed by the machine name of our
      // custom form mode.
      $user_type->setFormClass($machine_name, $default_handler_class);
    }
  }
}

/**
 * Implements hook_validation_constraint_alter().
 */
function am_net_user_profile_validation_constraint_alter(array &$definitions) {
  $definitions['AddressFormat']['class'] = 'Drupal\am_net_user_profile\Plugin\Validation\Constraint\ConstraintAddressFormat';
}

/**
 * Implements hook_element_info_alter().
 */
function am_net_user_profile_element_info_alter(array &$info) {
  if (isset($info['entity_autocomplete']['#element_validate'])) {
    $class = 'Drupal\am_net_user_profile\Element\EntityAutocomplete';
    $info['entity_autocomplete']['#element_validate'] = [[$class, 'validateEntityAutocomplete']];
  }
}

/**
 * Implements hook_form_alter().
 */
function am_net_user_profile_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $user = \Drupal::currentUser();
  $user_roles = $user->getRoles();
  $is_admin = in_array('administrator', $user_roles) || in_array('vscpa_administrator', $user_roles);
  $supported_forms = [
    'user_form',
    'user_update_profile_website_account_form',
    'user_update_profile_general_member_information_form',
    'user_update_profile_elected_officials_form',
    'user_update_profile_employment_information_form',
    'user_update_profile_communications_form',
  ];
  if (in_array($form_id, $supported_forms)) {
    // Remove N/A options - we want people to pick something!
    $fields = [
      'field_contact_pref',
      'field_disclosures_sendto',
      'field_cpecatalog_sendto',
      'field_receive_offers',
      'field_postal_sendto',
      'field_nasba_optin',
      'field_preferred_chapter',
      'field_licensed_in',
    ];
    foreach ($fields as $field_name) {
      if (isset($form[$field_name]['widget']['#options']['_none'])) {
        unset($form[$field_name]['widget']['#options']['_none']);
      }
    }
    if (isset($form['field_receive_sms']['widget']['#options']['LR'])) {
      unset($form['field_receive_sms']['widget']['#options']['LR']);
    }
    // Hide Admin fields.
    if (!$is_admin) {
      hide($form['actions']['delete']);
      hide($form['account']['status']);
      hide($form['account']['name']);
    }
    hide($form['field_member_select']);
    $form['account']['current_pass']['#description'] = t('Required if you want to change the <em class="placeholder">Email address</em> or <em class="placeholder">Password</em> below.');
    $field_name = 'field_firm';
    if (isset($form[$field_name]['widget']['target_id'])) {
      // Change the entity selector on Firm auto-complete.
      $form[$field_name]['widget']['target_id']['#selection_handler'] = 'default:firm_by_address';
    }
    // Add custom validation function for remove sync lock over user records.
    $validators = isset($form['#validate']) ? $form['#validate'] : [];
    array_unshift($validators, 'am_net_user_profile_user_remove_sync_lock_validate');
    $form['#validate'] = $validators;
  }

  if ($form_id == 'user_update_profile_elected_officials_form') {
    $field_name = 'field_party_affiliation';
    if (isset($form[$field_name]['widget']['#options']['_none'])) {
      unset($form[$field_name]['widget']['#options']['_none']);
    }
  }
  if ($form_id == 'user_register_form') {
    // Hide user name field.
    hide($form['account']['name']);
    $form['account']['mail']['#weight'] = 1;
    $form['account']['mail_confirm'] = [
      '#title' => t('Confirm your email'),
      '#type' => 'email',
      '#default_value' => '',
      '#size' => 60,
      '#weight' => 2,
      '#maxlength' => 128,
      '#required' => TRUE,
    ];
    $form['account']['name']['#required'] = FALSE;
    $validators = isset($form['#validate']) ? $form['#validate'] : [];
    array_push($validators, 'am_net_user_profile_user_register_validate');
    $form['#validate'] = $validators;
  }
  if (($form_id == 'views_exposed_form') && isset($form['#id']) && ($form['#id'] == 'views-exposed-form-user-admin-people-page-1')) {
    // Handle filter: New Firm?.
    hide($form['field_firm_other_value_op']);
    hide($form['firm_other']);
    $request_service = \Drupal::request();
    $new_firm = $request_service->request->get('new_firm');
    $form['new_firm'] = [
      '#title' => t('New Firm?'),
      '#type' => 'select',
      '#description' => 'If a Firm is not found, the a user can add the<br>firm details for review by an administrator.',
      '#options' => [
        '1' => t('Yes'),
        '2' => t('No'),
      ],
      '#default_value' => empty($new_firm) ? '2' : $new_firm,
    ];
    // Handle filter: Graduate/Under-Grad Location.
    unset($form['field_other_undergraduate_value_op']);
    hide($form['field_other_undergraduate_value']);
    unset($form['field_other_graduate_value_op']);
    hide($form['field_other_graduate_value']);
    // Handle filter:
    $new_college = $request_service->request->get('new_college');
    $form['new_college'] = [
      '#title' => t('New College or University:'),
      '#type' => 'select',
      '#options' => [
        'All' => t('- None -'),
        '1' => t('Undergraduate'),
        '2' => t('Graduate'),
      ],
      '#default_value' => empty($new_college) ? 'All' : $new_college,
    ];
    // Add Validators.
    $validators = isset($form['#validate']) ? $form['#validate'] : [];
    array_unshift($validators, 'vscpa_user_admin_people_validate');
    $form['#validate'] = $validators;
  }
}

/**
 * Validates submission values in the user admin people form.
 */
function vscpa_user_admin_people_validate(array &$form, FormStateInterface &$form_state) {
  $new_firm = $form_state->getValue('new_firm');
  $filter_by_new_firm = ($new_firm == '1');
  if ($filter_by_new_firm) {
    $form_state->setValue('field_firm_other_value_op', 'not empty');
  }
  else {
    $form_state->setValue('field_firm_other_value_op', 'empty');
  }
  // Handle New College Filter.
  $new_college = $form_state->getValue('new_college');
  if ($new_college == '1') {
    // Filter by new Undergraduate colleges.
    $form_state->setValue('field_other_undergraduate_value_op', 'not empty');
    $form_state->setValue('field_other_graduate_value_op', NULL);
    $form_state->setValue('field_other_graduate_value', NULL);
  }
  elseif ($new_college == '2') {
    // Filter by new Graduate colleges.
    $form_state->setValue('field_other_graduate_value_op', 'not empty');
    $form_state->setValue('field_other_undergraduate_value_op', NULL);
    $form_state->setValue('field_other_undergraduate_value', NULL);
  }
  else {
    $form_state->setValue('field_other_undergraduate_value_op', NULL);
    $form_state->setValue('field_other_undergraduate_value', NULL);
    $form_state->setValue('field_other_graduate_value_op', NULL);
    $form_state->setValue('field_other_graduate_value', NULL);
  }
}

/**
 * Validates submission values in the user register form.
 */
function am_net_user_profile_user_register_validate(array &$form, FormStateInterface &$form_state) {
  if (!empty($form_state->getErrors())) {
    // Stop Here.
    return;
  }
  // Check Address.
  $address_items = $form_state->getValue('field_home_address');
  $address = is_array($address_items) ? current($address_items) : NULL;
  $country_code = $address['address']['country_code'] ?? NULL;
  if (empty($country_code)) {
    $form_state->setErrorByName('field_home_address', t('Please enter your address.'));
    return;
  }
  $email = $form_state->getValue('mail');
  $mail_confirm = $form_state->getValue('mail_confirm');
  if (empty($email) || empty($mail_confirm)) {
    $form_state->setErrorByName('mail_confirm', t('The confirmation email is required.'));
    return;
  }
  if (strtolower($email) != strtolower($mail_confirm)) {
    $form_state->setErrorByName('mail_confirm', t('The confirmation email is not the same as the primary email.'));
    return;
  }
  // Check if the user already exit on AM.net.
  $person = person_load_by_mail($email, $load_entity = FALSE);
  if (!empty($person)) {
    $form_state->setErrorByName('mail', t("The email address <strong>@email</strong> is already in use by another account in our system. If it belongs to you, please <a href='/user/login' class='sign-in'>sign in</a>, or <a href='/user/password' class='sign-in'>reset your password</a>. Questions? Contact (800) 733-8272.", ['@email' => $email]));
    return;
  }
  // Check type of request.
  $is_ajax = \Drupal::request()->isXmlHttpRequest();
  $add_gluu_user = !$is_ajax;
  // Create the user on Gluu Server.
  if ($add_gluu_user) {
    $submitted_data = $form_state->getValues();
    $success = \Drupal::service('gluu.client')->createUserFromSubmittedData($submitted_data);
    if (!$success) {
      $form_state->setError($form, t("The account could not be created. Please try again."));
    }
  }
}

/**
 * Implements template_preprocess_html().
 */
function am_net_user_profile_preprocess_html(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'entity.user.edit_form') {
    // Add extra class for page user edit.
    $variables['attributes']['class'][] = 'page-user-edit';
  }
}

/**
 * Fetches a AM.net person object by email address.
 *
 * @param string $mail
 *   String with the account's email address.
 * @param bool $load_entity
 *   Flag that determine whether the NameRecord object should be loaded or not.
 *
 * @return object|string|bool
 *   The PersonID, A fully-loaded $person object upon successful user load
 *   or FALSE if user cannot be loaded.
 *
 * @see \Drupal\am_net_user_profile\Entity\Person::loadMultiple()
 */
function person_load_by_mail($mail, $load_entity = TRUE) {
  if ($load_entity) {
    $result = \Drupal::service('am_net.entity_manager')->getStorage('person', Person::class)->loadByProperties(['email' => $mail]);
    $person = $result ? reset($result) : FALSE;
  }
  else {
    $person = \Drupal::service('am_net.client')->loadPersonIdByEmail($mail);
  }
  return $person;
}

/**
 * Implements hook_mail().
 *
 * Captures the outgoing mail and sets appropriate message body and headers.
 */
function am_net_user_profile_mail($key, &$message, $params) {
  if (isset($params['headers'])) {
    $message['headers'] = array_merge($message['headers'], $params['headers']);
  }
  if (isset($params['from'])) {
    $message['from'] = $params['from'];
  }
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

/**
 * Get Current User AMNet ID by email.
 *
 * @param string $email
 *   The Drupal email.
 *
 * @return string|null
 *   The AMNet ID of the user, otherwise NULL.
 */
function am_net_user_profile_get_amnet_id_by_email($email = NULL) {
  if (empty($email)) {
    return NULL;
  }
  $database = \Drupal::database();
  $query = $database->select('user__field_amnet_id', 'field_amnet');
  $query->fields('field_amnet', ['field_amnet_id_value']);
  // Join with Email field.
  $query->leftJoin('users_field_data', 'usd', 'usd.uid = field_amnet.entity_id');
  // Filter by email.
  $escaped_email = $database->escapeLike($email);
  $query->condition('usd.mail', $escaped_email, 'LIKE');
  $query->condition('field_amnet.bundle', 'user');
  $query->range(0, 1);
  $amnet_id = $query->execute()->fetchField();
  $amnet_id = trim($amnet_id);
  return !empty($amnet_id) ? $amnet_id : FALSE;
}

/**
 * Get Current User AMNet Id by UID.
 *
 * @param string $uid
 *   The Drupal uid.
 *
 * @return string|null
 *   The AMNet of the user, otherwise NULL.
 */
function am_net_user_profile_get_amnet_id_by_uid($uid = NULL) {
  if (empty($uid)) {
    return NULL;
  }
  $database = \Drupal::database();
  $query = $database->select('user__field_amnet_id', 'field_amnet');
  $query->fields('field_amnet', ['field_amnet_id_value']);
  $query->condition('field_amnet.entity_id', $uid);
  $query->condition('bundle', 'user');
  $query->range(0, 1);
  $amnet_id = $query->execute()->fetchField();
  $amnet_id = trim($amnet_id);
  return !empty($amnet_id) ? $amnet_id : FALSE;
}

/**
 * Get User by AMNet Id.
 *
 * @param string $name_id
 *   The Name ID.
 *
 * @return \Drupal\user\UserInterface|bool
 *   The Drupal user account, otherwise false.
 */
function am_net_user_profile_get_user_by_amnet_id($name_id = NULL) {
  if (empty($name_id)) {
    return NULL;
  }
  $database = \Drupal::database();
  $query = $database->select('user__field_amnet_id', 't');
  $query->fields('t', ['entity_id']);
  $query->condition('field_amnet_id_value', $name_id);
  $query->range(0, 1);
  $uid = $query->execute()->fetchField();
  if (empty($uid)) {
    return FALSE;
  }
  return user_load($uid);
}

/**
 * Check if the user has orders associated.
 *
 * @param string $uid
 *   The user ID.
 *
 * @return bool
 *   TRUE if the user has order associated, otherwise false.
 */
function am_net_user_profile_user_has_order_associated($uid = NULL) {
  if (empty($uid)) {
    return NULL;
  }
  $database = \Drupal::database();
  $query = $database->select('commerce_order', 'o');
  $query->fields('o', ['order_id']);
  $query->condition('uid', $uid);
  $query->range(0, 1);
  $order_id = $query->execute()->fetchField();
  if (empty($order_id)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Get the chapter info associated with a given user.
 *
 * @param string $uid
 *   The user ID.
 *
 * @return array|bool
 *   The Chapter info, otherwise false.
 */
function am_net_user_profile_get_chapter_info($uid = NULL) {
  if (empty($uid)) {
    return NULL;
  }
  $database = \Drupal::database();
  $query = $database->select('user__field_preferred_chapter', 'pc');
  $query->leftJoin('taxonomy_term__field_chapter_link', 'pcl', 'pcl.entity_id = pc.field_preferred_chapter_target_id');
  $query->leftJoin('taxonomy_term_field_data', 'pct', 'pct.tid = pc.field_preferred_chapter_target_id');
  $query->addField('pc', 'field_preferred_chapter_target_id', 'tid');
  $query->addField('pcl', 'field_chapter_link_value', 'link');
  $query->addField('pct', 'name', 'name');
  $query->condition('pc.entity_id', $uid);
  $query->range(0, 1);
  $info = $query->execute()->fetchAssoc();
  if (empty($info)) {
    return FALSE;
  }
  $link = $info['link'] ?? NULL;
  if (empty($link)) {
    return FALSE;
  }
  return $info;
}
