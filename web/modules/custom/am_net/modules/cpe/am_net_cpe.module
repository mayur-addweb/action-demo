<?php

/**
 * @file
 * AM.net CPE module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\am_net_cpe\EventHelper;
use Drupal\user\UserInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Url;

// Default VENDORs Constants.
define('AM_NET_CPE_SMARTPROS', 6290);
define('AM_NET_CPE_INXPO', 14355);
define('AM_NET_CPE_ACPEN', 7650);
define('AM_NET_CPE_ACPEN_PRODUCT', 21242);
// Zoom Firm ID: 32438.
define('AM_NET_CPE_ZOOM', 17657);
// Zoom Firm ID: 32563.
define('AM_NET_CPE_ZOOM2', 17763);
// Zoom Firm ID: 32520.
define('AM_NET_CPE_ZOOM3', 17764);
// Zoom Firm ID: 32562.
define('AM_NET_CPE_ZOOM4', 17765);

/**
 * Implements hook_theme().
 */
function am_net_cpe_theme($existing, $type, $theme, $path) {
  return [
    'am_net_related_events' => [
      'variables' => [
        'items' => NULL,
      ],
    ],
    'my_cpe' => [
      'variables' => [
        'on_demand' => NULL,
        'in_person' => NULL,
        'online' => NULL,
        'uid' => NULL,
        'am_net_name_id' => NULL,
        'full_name' => NULL,
      ],
    ],
    'my_cpe_digital_rewind' => [
      'variables' => [
        'registrations' => NULL,
        'uid' => NULL,
        'am_net_name_id' => NULL,
        'full_name' => NULL,
        'product_url' => NULL,
      ],
    ],
    'vic_access_via_email' => [
      'variables' => [
        'event_code' => NULL,
        'event_year' => NULL,
        'sso_downtime' => NULL,
      ],
    ],
    'my_cpe_electronic_materials' => [
      'variables' => [
        'on_demand' => NULL,
        'in_person' => NULL,
        'online' => NULL,
        'uid' => NULL,
        'show_title' => NULL,
      ],
    ],
    'ada_compliance_modal' => [
      'variables' => [
        'checked' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function am_net_cpe_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $user = \Drupal::currentUser();
  $current_user_id = $user->id();
  $is_firm_administrator = in_array('firm_administrator', $user->getRoles());
  if (!$is_firm_administrator) {
    unset($data['tabs'][0]['am_net_cpe.employee_cpe']);
    return;
  }
  $user = \Drupal::routeMatch()->getParameter('user');
  if (!($user instanceof UserInterface)) {
    unset($data['tabs'][0]['am_net_cpe.employee_cpe']);
    return;
  }
  $uid = $user->id();
  if ($uid == $current_user_id) {
    unset($data['tabs'][0]['am_net_cpe.employee_cpe']);
    return;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave() for 'commerce_order_item'.
 */
function am_net_cpe_commerce_product_presave(EntityInterface $product) {
  /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
  if ($product->bundle() != 'cpe_event') {
    return;
  }
  /** @var \Drupal\commerce_product\Entity\ProductInterface $original */
  $original = $product->original ?? NULL;
  if (!$original) {
    return;
  }
  if ($product->isPublished() == $original->isPublished()) {
    // Nothing has changed, therefore stop here.
    return;
  }
  // Propagate the change in the "Virtual Conference" page associated to this
  // product(if any).
  $event_code = $product->field_amnet_event_id->code ?? NULL;
  $event_year = $product->field_amnet_event_id->year ?? NULL;
  $node = EventHelper::getVirtualConferenceByEventId($event_code, $event_year);
  if (!$node) {
    // The event has not 'Virtual Conference' related.
    return;
  }
  if ($product->isPublished()) {
    $node->setPublished();
  }
  else {
    $node->setUnpublished();
  }
  $node->save();
}

/**
 * Implements template_preprocess_node().
 */
function am_net_cpe_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  if ($node->bundle() != 'digital_rewind_page') {
    return TRUE;
  }
  if ($variables['view_mode'] != 'full') {
    return TRUE;
  }
  // The "current user" is used above, which depends on the request,
  // so we tell Drupal to vary by the 'user' cache context.
  $variables['elements']['#cache']['contexts'][] = 'user';
  $variables['elements']['#cache']['tags'][] = 'sso_downtime_tag';
  // Load the 'Virtual Conference' sessions info.
  $am_net_event_id = $node->get('field_digital_rewind_event_id')->getValue();
  $am_net_event_id = is_array($am_net_event_id) ? current($am_net_event_id) : NULL;
  $event_code = $am_net_event_id['code'] ?? NULL;
  $event_year = $am_net_event_id['year'] ?? NULL;
  if (empty($event_code) || empty($event_year)) {
    return TRUE;
  }
  $event_code = trim($event_code);
  $event_year = trim($event_year);
  // Get the Production URL.
  $product_id = am_net_cpe_get_cpe_product_id_by_code_and_year($event_code, $event_year);
  $product_url = NULL;
  if (!empty($product_id)) {
    $options = ['absolute' => TRUE];
    $url = Url::fromRoute('entity.commerce_product.canonical', ['commerce_product' => $product_id], $options);
    $product_url = $url->toString();
  }
  if (am_net_cpe_is_sso_downtime_active()) {
    $digital_rewind_content = [
      '#theme' => 'vic_access_via_email',
      '#event_code' => $event_code,
      '#event_year' => $event_year,
      '#cache' => [
        'max-age' => 0,
        'tags' => ['sso_downtime_tag'],
        'contexts' => ['user'],
      ],
      '#attached' => [
        'library' => ['am_net_cpe/virtual_conference_access_via_email_widget'],
      ],
      '#weight' => 4,
    ];
    $variables['content']['digital_rewind_content'] = $digital_rewind_content;
    return;
  }
  $current_user = \Drupal::currentUser();
  if ($current_user->isAnonymous()) {
    $variables['content']['digital_rewind_content'] = [
      '#markup' => '<h5>Log in <i><a href="/user/login">here</a></i> to see your CPE courses & Registrations.</h5>',
      '#weight' => 4,
      '#cache' => [
        'max-age' => 0,
        'tags' => ['sso_downtime_tag'],
        'contexts' => ['user'],
      ],
    ];
    return TRUE;
  }
  $uid = $current_user->id();
  $user = User::load($uid);
  $manager = \Drupal::service('am_net_cpe.virtual_conference_manager');
  $cpe_info = $manager->loadVirtualConferenceInfo($user, $event_year, $event_code);
  if (empty($cpe_info)) {
    $digital_rewind_content = [
      '#markup' => '<p></p>',
      '#cache' => [
        'max-age' => 0,
        'tags' => ['sso_downtime_tag'],
        'contexts' => ['user'],
      ],
    ];
  }
  else {
    $digital_rewind_content = [
      '#theme' => 'my_cpe_digital_rewind',
      '#registrations' => $cpe_info['registrations'],
      '#am_net_name_id' => $cpe_info['am_net_name_id'],
      '#full_name' => $cpe_info['full_name'],
      '#product_url' => $product_url,
      '#uid' => $uid,
      '#cache' => [
        'max-age' => 0,
        'tags' => ['sso_downtime_tag'],
        'contexts' => ['user'],
      ],
      '#weight' => 4,
    ];
  }
  $variables['content']['digital_rewind_content'] = $digital_rewind_content;
}

/**
 * Get Drupal Cpe Event Product.
 *
 * @param string $event_code
 *   The AM.net event code.
 * @param string $event_year
 *   The AM.net event year (two digits).
 *
 * @return string|null
 *   The event product.
 */
function am_net_cpe_get_cpe_product_id_by_code_and_year($event_code, $event_year) {
  $database = \Drupal::database();
  $query = $database->select('commerce_product__field_amnet_event_id', 'amnet_event_id');
  $query->fields('amnet_event_id', ['entity_id']);
  $query->condition('field_amnet_event_id_code', $event_code);
  $query->condition('field_amnet_event_id_year', $event_year);
  $entity_id = $query->execute()->fetchField();
  if (empty($entity_id)) {
    return NULL;
  }
  return $entity_id;
}

/**
 * AM.net Determines if the SSO-Downtime mode is active.
 *
 * The debug value is store statically for be used during the request.
 *
 * @return bool
 *   TRUE if the debug mode is active, Otherwise FAlSE.
 */
function am_net_cpe_is_sso_downtime_active() {
  $stored_debug =& drupal_static(__FUNCTION__, $default_value = NULL);
  if (is_null($stored_debug)) {
    $stored_debug = \Drupal::state()->get('am_net_cpe.sso_downtime', FALSE);
  }
  return boolval($stored_debug);
}
