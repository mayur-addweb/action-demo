<?php

/**
 * @file
 * Provides enhancements for VSCPA SSO.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\user\UserInterface;

/**
 * Implements hook_form_alter().
 */
function vscpa_sso_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $key = 'simplesamlphp_auth_login_link';
  if ($form_id == 'user_login_form' && isset($form[$key])) {
    $label = isset($form[$key]['#title']) ? $form[$key]['#title'] : '';
    $url = isset($form[$key]['#url']) ? $form[$key]['#url'] : '';
    if (empty($label) || empty($url)) {
      return;
    }
    $url = $url->toString();
    unset($form[$key]);
    $form['#suffix'] = "<div class='alert alert-info' role='alert'><a href='{$url}' title='{$label}' class='simplesamlphp-auth-login-link' data-drupal-selector='edit-simplesamlphp-auth-login-link' id='edit-simplesamlphp-auth-login-link'><span class='glyphicon glyphicon-user' aria-hidden='true'></span> {$label}</a></div>";
  }
  if ($form_id == 'user_register_form') {
    // Add custom submit handler.
    $form['#submit'][] = 'vscpa_sso_user_register_submit';
  }
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  $is_admin = in_array('administrator', $roles) || in_array('vscpa_administrator', $roles);
  if ($is_admin && ($form_id == 'user_form')) {
    /* @var \Drupal\user\UserInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();
    if ($entity && ($entity instanceof UserInterface)) {
      // Add custom submit handler.
      $markup = "<h5><strong>Email Address:</strong> <i>{$entity->getEmail()}</i></h5>";
      $form['field_amnet_id']['user_email_address'] = ['#markup' => $markup];
      if (isset($form['simplesamlphp_auth_user_enable'])) {
        hide($form['simplesamlphp_auth_user_enable']);
      }
    }
  }
  if ($form_id == 'user_pass') {
    // Add custom submit handler.
    $url = 'mailto:vscpa@vscpa.com?Subject=Reset Your Password';
    $form['name']['#title'] = t('Email address');
    $form['mail']['#markup'] = t('Instructions on resetting your password will be sent to your email address. Questions? Email <a href="@url">vscpa@vscpa.com</a> or call (800) 733-8272.', ['@url' => $url]);
    $form['#submit'] = ['vscpa_sso_user_pass_form_submit'];
  }
}

/**
 * Submit handler - user PASS form.
 */
function vscpa_sso_user_pass_form_submit(array &$form, FormStateInterface &$form_state) {
  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $account = $form_state->getValue('account');
  // Mail one time login URL and instructions using current language.
  $mail = _user_mail_notify('password_reset', $account, $langcode);
  if (!empty($mail)) {
    $params = [
      '%name' => $account->getUsername(),
      '%email' => $account->getEmail(),
    ];
    \Drupal::logger('user')->notice('Password reset instructions mailed to %name at %email.', $params);
    $url = 'mailto:vscpa@vscpa.com?Subject=Reset Your Password';
    \Drupal::messenger()->addStatus(t('Instructions on resetting your password have been sent to your email address. Questions? Email <a href="@url">vscpa@vscpa.com</a> or call (800) 733-8272.', ['@url' => $url]));
  }
  $form_state->setRedirect('user.pass');
}

/**
 * Submit handler - user register form.
 */
function vscpa_sso_user_register_submit(array &$form, FormStateInterface &$form_state) {
  $sso_settings = \Drupal::config('simplesamlphp_auth.settings');
  if ($sso_settings->get('activate')) {
    // Redirect to SSO Gluu Server.
    $form_state->setRedirect('user.login');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the user register form to include a checkbox signifying the user
 * should be SimpleSAML enabled. Removes password fields if the IdP
 * is the sole place for password management.
 *
 * @see AccountForm::form()
 * @see simplesamlphp_auth_user_form_submit()
 */
function vscpa_sso_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Active change of the pwd locally while is defined SSO.
  $form['account']['current_pass']['#access'] = TRUE;
  $form['account']['pass']['#access'] = TRUE;
}

/**
 * Hook to map pre-existing Drupal user based on SAML attributes.
 *
 * Allows other modules to decide if there is an existing Drupal user that
 * should be linked with the SAML-authenticated user authname, based on the
 * supplied SAML atttributes.
 *
 * E.g. When a SAML-authenticated user logs in, try to find an existing Drupal
 * user which has the same email address as specified in the SAML attributes.
 * In that case the existing Drupal user and SAML-authenticated user will be
 * linked, and that Drupal user will be loaded and logged in upon successful
 * SAML authentication.
 *
 * @param array $attributes
 *   The SimpleSAMLphp attributes for this user.
 *
 * @return \Drupal\user\UserInterface|bool
 *   The pre-existing Drupal user to be SAML-enabled, or FALSE if none found.
 */
function vscpa_sso_simplesamlphp_auth_existing_user(array $attributes = []) {
  $saml_mail = $attributes['mail'][0] ?? NULL;
  if (empty($saml_mail)) {
    // Stop here.
    return FALSE;
  }
  $existing_users = \Drupal::service('entity.manager')->getStorage('user')->loadByProperties(['mail' => $saml_mail]);
  if ($existing_users) {
    $existing_user = is_array($existing_users) ? reset($existing_users) : FALSE;
    if ($existing_user) {
      return $existing_user;
    }
  }
  // Try to look up the user on AM.net.
  $info = \Drupal::service('am_net_user_profile.manager')->syncUserProfile($saml_mail);
  // Check if the user exits.
  $existing_user = user_load_by_mail($saml_mail);
  if ($existing_user) {
    return $existing_user;
  }
  return FALSE;
}

/**
 * Hook to alter the assigned authname of a pre-existing Drupal user.
 *
 * Allows other modules to change the authname that is being stored when
 * a pre-existing Drupal user account gets SAML-enabled.
 * This is done by clicking the checkbox "Enable this user to leverage SAML
 * authentication" upon user registration or the user edit form (given enough
 * permissions).
 *
 * For example, this allows you to pre-register Drupal accounts and store the
 * entered email address (rather than the default username) as the authname.
 * The SAML user with that email address as authname will then be able to login
 * as that Drupal user.
 *
 * @param string $authname
 *   The current authname that will be assigned this user (default: username).
 * @param \Drupal\user\UserInterface $account
 *   The pre-existing Drupal user to be SAML-enabled.
 */
function vscpa_sso_simplesamphp_auth_account_authname_alter(&$authname, UserInterface $account) {
  $authname = $account->mail;
}

/**
 * Implements hook_mail_alter().
 *
 * Captures the outgoing password_reset mail and sets
 * appropriate message body and headers.
 */
function vscpa_sso_mail_alter(&$message) {
  if (isset($message['id']) && ($message['id'] == 'user_password_reset')) {
    // Sending html formatted email.
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    $body = isset($message['body']) ? current($message['body']) : '';
    $message['body'] = [Markup::create($body)];
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function vscpa_sso_local_tasks_alter(&$local_tasks) {
  $local_tasks['user.pass']['title'] = 'Reset Your Password';
}
