<?php

/**
 * @file
 * Provides enhancements for VSCPA Search.
 */

use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\am_net_cpe\EventHelper;

/**
 * Implements hook_form_alter().
 */
function vscpa_search_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if (isset($form['field_search_keywords'])) {
    $form['search_keywords'] = [
      '#type' => 'details',
      '#tree' => TRUE,
      '#title' => t('Search Keywords'),
      '#group' => 'advanced',
      '#attributes' => [
        'class' => ['node-form-options'],
      ],
      '#attached' => [
        'library' => ['node/drupal.node'],
      ],
      '#weight' => 99,
      '#optional' => TRUE,
    ];
    $form['field_search_keywords']['#group'] = 'search_keywords';
  }
  if (($form_id == 'views_exposed_form') && isset($form['#id'])) {
    if ($form['#id'] == 'views-exposed-form-search-global-search') {
      $form['keywords']['#attributes']['placeholder'] = t('Find Courses, Articles, Resources & More...');
      if (\Drupal::service('path.matcher')->isFrontPage()) {
        hide($form['sort_by']);
        hide($form['type']);
      }
      $node = \Drupal::routeMatch()->getParameter('node');
      $node_id_event_search = 16;
      if (($node instanceof NodeInterface) && ($node->id() == $node_id_event_search)) {
        unset($form['sort_by']);
      }
    }
    if ($form['#id'] == 'views-exposed-form-events-events') {
      // Handle date pickers.
      $libraries = $form['#attached']['library'];
      $datepicker_delta = array_search('better_exposed_filters/datepickers', $libraries);
      if ($datepicker_delta !== FALSE) {
        $form['#attached']['library'][$datepicker_delta] = 'vscpa_search/datepickers';
      }
      // Include field: Credit Hours.
      hide($form['field_search_index_credit_hours_value']);
      $user_input_values = $form_state->getUserInput();
      $default_value = [];
      if (isset($user_input_values['credit_hours'])) {
        $default_value = array_keys($user_input_values['credit_hours']);
      }
      $form['credit_hours'] = [
        '#title' => t('Credit Hours'),
        '#type' => 'checkboxes',
        '#options' => [
          'All' => 'All',
          '0-1' => '0-1',
          '1' => '1',
          '2|3' => '2-3',
          '4' => t('4'),
          '5|6|7' => t('5-7'),
          '8' => t('8'),
          '9|10|11|12|13|14|15' => t('9-15'),
          '16|17|18|19|20|21|22|23|24' => t('16+'),
        ],
        '#default_value' => $default_value,
      ];
      // Include field: Credit type.
      hide($form['field_search_index_attest_compil_value']);
      hide($form['field_search_index_cfp_value']);
      hide($form['field_search_index_yellow_book_value']);
      $field_key = 'credit_type';
      $default_value = ['any'];
      if (isset($user_input_values[$field_key])) {
        $default_value = array_keys($user_input_values[$field_key]);
      }
      $form[$field_key] = [
        '#title' => t('Credit type'),
        '#type' => 'checkboxes',
        '#options' => [
          'any' => 'Any',
          'attest_compilation' => t('Attest & Compilation'),
          'cfp' => t('CFP'),
          'yellow_book' => 'Yellow Book',
        ],
        '#default_value' => $default_value,
      ];
      // Include field: Discounts.
      hide($form['field_search_index_aicpa_value']);
      hide($form['field_search_index_free_value']);
      hide($form['field_search_index_early_regis_value']);
      $field_key = 'discounts';
      $default_value = ['any'];
      if (isset($user_input_values[$field_key])) {
        $default_value = array_keys($user_input_values[$field_key]);
      }
      $form[$field_key] = [
        '#title' => t('Discounts'),
        '#type' => 'checkboxes',
        '#options' => [
          'any' => 'Any',
          'aicpa' => t('AICPA'),
          'early_registration' => t('Early Registration'),
          'free' => 'Free',
          'bundle' => 'Package',
        ],
        '#default_value' => $default_value,
      ];
      // Handle field: Division.
      $form['field_division_value']['#default_value'] = 'All';
      hide($form['field_division_value']);
      // Include field: Format.
      hide($form['field_search_index_in_person_value']);
      hide($form['field_search_index_on_demand_value']);
      hide($form['field_search_index_online_value']);
      hide($form['bundle']);
      $field_key = 'format';
      $filter_key = 'filter-format';
      $default_value = ['any'];
      if (isset($user_input_values[$field_key])) {
        $default_value = array_keys($user_input_values[$field_key]);
      }
      $form[$field_key] = [
        '#title' => t('Format'),
        '#type' => 'checkboxes',
        '#options' => [
          'any' => 'Any',
          'in-person' => t('In-Person'),
          'online' => t('Online'),
          'on-demand' => 'On-Demand',
          'bundle' => 'Package',
        ],
        '#default_value' => $default_value,
      ];
      $element_to_insert = [];
      $element_to_insert[$filter_key] = [
        'operator' => '',
        'value' => $field_key,
        'label' => 'Format',
        "description" => '',
      ];
      $insert_index = 2;
      $form_info_top = array_slice($form['#info'], 0, $insert_index);
      $form_info_bottom = array_slice($form['#info'], $insert_index);
      $new_form_info = $form_info_top + $element_to_insert + $form_info_bottom;
      $iterator = 0;
      foreach ($new_form_info as &$info) {
        $info['#weight'] = $iterator;
        $iterator += 1;
      }
      $form['#info'] = $new_form_info;
      // @todo Search Index - Location.
      hide($form['field_keywords']);
      hide($form['field_of_interest']);
      // Configure vendors fields.
      hide($form['field_vendors']);
      $field_key = 'vendors';
      $default_value = ['any'];
      if (isset($user_input_values[$field_key])) {
        $default_value = array_keys($user_input_values[$field_key]);
      }
      $form[$field_key] = [
        '#title' => t('Vendors'),
        '#type' => 'checkboxes',
        '#options' => [
          'any' => 'Any',
          'inxpo' => t('INXPO'),
          'acpen' => t('ACPEN'),
          'smartpros' => t('SMARTPROS'),
        ],
        '#default_value' => $default_value,
      ];
      hide($form[$field_key]);
      // Handle Search Index - Keyword.
      hide($form['marketing_keywords']);
      hide($form['marketing_keywords_op']);
      // Handle Geolocation proximity filter.
      hide($form['field_search_index_geolocation_proximity_op']);
      hide($form['field_search_index_geolocation_proximity']);
      hide($form['center']);
      //Commented for Hiding Location filetr in CPE catelog (tasks/21540676)
      // $form['location'] = [
      //   '#type' => 'details',
      //   '#title' => t('Location'),
      //   '#tree' => 'TRUE',
      //   '#attributes' => [
      //     'class' => ['geolocation-filter'],
      //   ],
      //   'zip_code' => [
      //     '#type' => 'number',
      //     '#title' => t('Enter your zip code'),
      //     '#size' => 10,
      //     '#default_value' => NULL,
      //     '#attributes' => [
      //       'placeholder' => t('Enter Your Zip Code'),
      //     ],
      //   ],
      //   'radius' => [
      //     '#type' => 'select',
      //     '#title' => t('Radius in miles'),
      //     '#default_value' => 15,
      //     '#options' => [
      //       '15' => t('15'),
      //       '30' => t('30'),
      //       '50' => t('50'),
      //       '75' => t('75'),
      //       '100' => t('100'),
      //       '1000' => t('101+'),
      //     ],
      //   ],
      // ];
      // Add Validators.
      $validators = isset($form['#validate']) ? $form['#validate'] : [];
      array_unshift($validators, 'vscpa_search_events_validate');
      $form['#validate'] = $validators;
      // Add Special Handling for sort by.
      $query_params = \Drupal::request()->query;
      $sort_by = $query_params->get('sort_by');
      $sort_by_default_value = 'field_search_index_date_value';
      if (!empty($sort_by)) {
        $sort_by_date = (strpos($sort_by, 'field_search_index_date_value') !== FALSE);
        $sort_by_title = (strpos($sort_by, 'title') !== FALSE);
        $sort_by_relevance = (strpos($sort_by, 'field_search_keywords_value') !== FALSE);
        if ($sort_by_relevance) {
          $sort_by_default_value = 'field_search_keywords_value';
        }
        elseif ($sort_by_date) {
          $sort_by_default_value = 'field_search_index_date_value';
        }
        elseif ($sort_by_title) {
          $sort_by_default_value = 'title';
        }
        else {
          $sort_by_default_value = 'field_search_index_date_value';
        }
        $form['sort_by']['#default_value'] = $sort_by_default_value;
        $form['sort_by']['#value'] = $sort_by_default_value;
      }
      if (!isset($form['sort_by']['#default_value'])) {
        $form['sort_by']['#default_value'] = $sort_by_default_value;
      }
    }
  }
}

/**
 * Implements function for remove empy entries from a given array.
 *
 * @param array $base
 *   The base array.
 *
 * @return array
 *   The processed array.
 */
function vscpa_search_remove_empty_entries(array $base = []) {
  if (empty($base)) {
    return $base;
  }
  $items = [];
  foreach ($base as $key => $value) {
    if (strlen($key) == 0) {
      continue;
    }
    $items[$key] = $value;
  }
  return $items;
}

/**
 * Implements hook_views_query_alter().
 */
function vscpa_search_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() != 'events') {
    return NULL;
  }
  $date_min = $view->exposed_raw_input['field_dates_times_value']['min'] ?? NULL;
  $date_max = $view->exposed_raw_input['field_dates_times_value']['max'] ?? NULL;
  if (empty($date_min) || empty($date_max)) {
    return NULL;
  }
  $format = 'Y-m-d\TH:i:s';
  // Set Date min.
  $date_min_time = strtotime($date_min);
  $date_min = date($format, $date_min_time);
  // Set Date max.
  $date_max_time = strtotime($date_max . ' +1 day');
  $date_max = date($format, $date_max_time);
  // Traverse through the 'where' part of the query.
  foreach ($query->where as &$condition_group) {
    foreach ($condition_group['conditions'] as &$condition) {
      $field = $condition['field'];
      // Field dates times value.
      if ((strpos($field, 'commerce_product__field_dates_times.field_dates_times_value') !== FALSE)) {
        $condition['field'] = "DATE_FORMAT((commerce_product__field_dates_times.field_dates_times_value + INTERVAL -18000 SECOND), '%Y-%m-%d\T%H:%i:%s') BETWEEN DATE_FORMAT(('{$date_min}' + INTERVAL -18000 SECOND), '%Y-%m-%d\T%H:%i:%s') AND DATE_FORMAT(('{$date_max}' + INTERVAL -18000 SECOND), '%Y-%m-%d\T%H:%i:%s')";
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function vscpa_search_views_plugins_filter_alter(array &$plugins) {
  if (!isset($plugins['geolocation_filter_proximity'])) {
    return;
  }
  $plugins['geolocation_filter_proximity']['class'] = 'Drupal\vscpa_search\Plugin\views\filter\ProximityFilter';
}

/**
 * Validates submission values in the user update form.
 */
function vscpa_search_events_validate(array &$form, FormStateInterface &$form_state) {
  // Set Value: Credit Hours.
  $credit_hours = $form_state->getValue('credit_hours');
  $value = [];
  $nano_credits = NULL;
  if (!empty($credit_hours) && is_array($credit_hours)) {
    foreach ($credit_hours as $delta => $val) {
      if (((string) $delta) === ((string) $val)) {
        if ($val === 'All') {
          return;
        }
        elseif ($val === '0-1') {
          $nano_credits = "(^0.[1-9]|1\.0+)";
        }
        else {
          $items = explode('|', $val);
          foreach ($items as $key => $digit) {
            $value[] = '^' . $digit;
          }
        }
      }
    }
  }
  $credit_items = [];
  $credit_hours = !empty($value) ? '(' . implode('|', $value) . ')' : NULL;
  if (!empty($credit_hours)) {
    $credit_items[] = $credit_hours;
  }
  $credit_hours = !empty($nano_credits) ? $nano_credits : NULL;
  if (!empty($credit_hours)) {
    $credit_items[] = $credit_hours;
  }

  if (!empty($credit_items)) {
    $field_credit_hours_value = implode('|', $credit_items);
    $form_state->setValue('field_search_index_credit_hours_value', $field_credit_hours_value);
  }
  // Set Value: Credit type.
  $credit_types = $form_state->getValue('credit_type');
  if (!empty($credit_types) && is_array($credit_types)) {
    if (isset($credit_types['any']) && ($credit_types['any'] === "any")) {
      // Any value selected, skip the filter.
    }
    else {
      foreach ($credit_types as $delta => $val) {
        if ($delta === $val) {
          // Check Search Index - Attest & Compilation.
          switch ($delta) {
            case 'attest_compilation':
              $form_state->setValue('field_search_index_attest_compil_value', '1');
              break;

            case 'yellow_book':
              $form_state->setValue('field_search_index_yellow_book_value', '1');
              break;

            case 'cfp':
              $form_state->setValue('field_search_index_cfp_value', '1');
              break;
          }
        }
      }
    }
  }
  // Set Value: Discounts.
  $discounts = $form_state->getValue('discounts');
  $discounts = vscpa_search_remove_empty_entries($discounts);
  $form_state->setValue('discounts', $discounts);
  if (!empty($discounts) && is_array($discounts)) {
    if (isset($discounts['any']) && ($discounts['any'] === "any")) {
      // Any value selected, skip the filter.
    }
    else {
      foreach ($discounts as $delta => $val) {
        if ($delta === $val) {
          // Check Search Index - Attest & Compilation.
          switch ($delta) {
            case 'aicpa':
              $form_state->setValue('field_search_index_aicpa_value', '1');
              break;

            case 'early_registration':
              $form_state->setValue('field_search_index_early_regis_value', date('m/d/Y'));
              break;

            case 'free':
              $form_state->setValue('field_search_index_free_value', '1');
              break;

            case 'bundle':
              $form_state->setValue('bundle', '1');
              break;

          }
        }
      }
    }
  }
  // Set Value: Format.
  $format = $form_state->getValue('format');
  if (!empty($format) && is_array($format)) {
    if (isset($format['any']) && ($format['any'] === "any")) {
      // Any value selected, skip the filter.
    }
    else {
      foreach ($format as $delta => $val) {
        if ($delta === $val) {
          // Check Search Index - Attest & Compilation.
          switch ($delta) {
            case 'in-person':
              $form_state->setValue('field_search_index_in_person_value', '1');
              break;

            case 'on-demand':
              $form_state->setValue('field_search_index_on_demand_value', '1');
              break;

            case 'online':
              $form_state->setValue('field_search_index_online_value', '1');
              break;

            case 'bundle':
              $form_state->setValue('bundle', '1');
              break;
          }
        }
      }
    }
  }
  // Set vendor fields.
  vscpa_search_events_validate_set_vendors($form_state);
  // Handle field: Division.
  $default_value = 'All';
  $allowed_options = $form['field_division_value']['#options'] ?? [];
  $allowed_values = array_keys($allowed_options);
  $division_value = \Drupal::request()->query->get('division_value', $default_value);
  if (!empty($division_value) && in_array($division_value, $allowed_values)) {
    $default_value = $division_value;
  }
  $form_state->setValue('field_division_value', $default_value);
  // Handle Geolocation Filter.
  vscpa_search_events_validate_set_geolocation($form_state);
}

/**
 * Handle Geolocation Filter.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function vscpa_search_events_validate_set_geolocation(FormStateInterface &$form_state) {
  // Set Geolocation default values.
  $location = $form_state->getValue('location');
  $zip_code = $location['zip_code'] ?? NULL;
  $radius = $location['radius'] ?? NULL;
  $radius_allowed_values = [
    '15',
    '30',
    '50',
    '75',
    '100',
    '1000',
  ];
  $reset = FALSE;
  if (empty($zip_code) || empty($radius) || !in_array($radius, $radius_allowed_values)) {
    $reset = TRUE;
  }
  if ($reset) {
    $geolocation_proximity_op = NULL;
    $geolocation_proximity = NULL;
    $lat = NULL;
    $lng = NULL;
    $form_state->setValue('center', NULL);
  }
  else {
    $pair = \Drupal::service("vscpa_search.lat_long.helper")->doLoad($zip_code);
    $lat = $pair['Latitude'] ?? NULL;
    $lng = $pair['Longitude'] ?? NULL;
    $geolocation_proximity_op = '<=';
    $geolocation_proximity = [
      'value' => $radius,
      'min' => '0',
      'max' => $radius,
    ];
  }
  $form_state->setValue('field_search_index_geolocation_proximity_op', $geolocation_proximity_op);
  $form_state->setValue('field_search_index_geolocation_proximity', $geolocation_proximity);
  $form_state->setValue('lat', $lat);
  $form_state->setValue('lng', $lng);
}

/**
 * Event search add vendor filter.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function vscpa_search_events_validate_set_vendors(FormStateInterface &$form_state) {
  $vendors = $form_state->getValue('vendors');
  if (empty($vendors) && !is_array($vendors)) {
    return NULL;
  }
  $include = [];
  foreach ($vendors as $delta => $val) {
    if ($delta === $val) {
      // Check Search Index - Attest & Compilation.
      switch ($delta) {
        case 'smartpros':
          $include[] = ['target_id' => AM_NET_CPE_SMARTPROS];
          break;

        case 'inxpo':
          $include[] = ['target_id' => AM_NET_CPE_INXPO];
          break;

        case 'acpen':
          $include[] = ['target_id' => AM_NET_CPE_ACPEN];
          break;
      }
    }
  }
  if (!empty($include)) {
    $form_state->setValue('field_vendors', $include);
  }
}

/**
 * Implements template_preprocess_node().
 */
function vscpa_search_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $bundle_label = $node->type->entity->label();
  $bundle_id = $node->type->entity->id();
  $field = 'field_pub_type';
  if (($bundle_id == 'publication') && $node->hasField($field)) {
    $bundle_label .= ' - ' . $node->$field->entity->label();
  }
  $variables['type'] = $bundle_label;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function vscpa_search_commerce_product_presave(EntityInterface $entity) {
  /* @var \Drupal\commerce_product\Entity\Product $entity */
  // Auto-populate fields used for search index.
  if (!$entity) {
    return;
  }
  $supported_bundles = ['cpe_event', 'cpe_self_study'];
  $bundle = $entity->bundle();
  if (!in_array($bundle, $supported_bundles)) {
    return;
  }
  // Search Index: Date.
  $field_name = 'field_search_index_date';
  $field_value = NULL;
  if ($bundle == 'cpe_event') {
    if (EventHelper::isEventGroup($entity, TRUE)) {
      // Get the value from: field_event_expiry from all the events group.
      $field_value = EventHelper::getEventGroupExpireDates($entity);
    }
    else {
      // Get the value from the field: field_event_expiry.
      $field_value = EventHelper::getEventExpireDate($entity);
    }
  }
  elseif ($bundle == 'cpe_self_study') {
    // Due that Self study product do not actually has expire date we are
    // using an default date in the distant future.
    $field_value = '2218-01-01T12:00:00';
  }
  $entity->set($field_name, $field_value);
  // Search index: Credit hours.
  $field_name = 'field_search_index_credit_hours';
  $field_value = NULL;
  if ($bundle == 'cpe_event') {
    // Get the value from the field: field_credit_hours.
    $value = $entity->get('field_credit_hours')->getString();;
    $field_value = !empty($value) ? $value : NULL;
  }
  elseif ($bundle == 'cpe_self_study') {
    $referenced_entities = $entity->get('field_credits')->referencedEntities();
    $referenced_entity = is_array($referenced_entities) ? current($referenced_entities) : NULL;
    if (!empty($referenced_entity)) {
      $value = $referenced_entity->get('field_credit_amount')->getString();
      $field_value = !empty($value) ? $value : NULL;
    }
  }
  $entity->set($field_name, $field_value);
  // Search Index - Format.
  if ($bundle == 'cpe_event') {
    $location_target_id = '15345';
    // 1. In-Person = events in AM.net where Division = “Group live” and/or
    // City is anything other than “Online”.
    // Get the value from the field: field_division.
    $division_value = $entity->get('field_division')->getString();
    $city_area = $entity->get('field_city_area')->getString();
    $city_is_not_online = !empty($city_area) || ($city_area != $location_target_id);
    $field_value = ($division_value == 'GROUP') && $city_is_not_online;
    $entity->set('field_search_index_in_person', $field_value);
    // 2. Online = events in AM.net where Location = "Online”.
    $field_value = ($city_area == $location_target_id);
    $entity->set('field_search_index_online', $field_value);
    // 3. On-Demand = products in AM.net where Division = “Self-study” or
    // where Division = “Individual on-demand” (provided this option is already
    // ONLY pulling products, there should be NO impact).
    $is_bundle_product = ($entity->get('field_search_index_is_bundle')->getString() == 1);
    if (!$is_bundle_product) {
      $division_value = $entity->get('field_division')->getString();
      $field_value = am_net_is_self_study($division_value);
      $entity->set('field_search_index_on_demand', $field_value);
    }
    // Populate Lat and Long values from AM.net.
    \Drupal::service('vscpa_search.populate_lat_lng_on_products')->populate($entity);
  }
  elseif ($bundle == 'cpe_self_study') {
    // 3. On-Demand = products in AM.net where Division = “Self-study” or
    // where Division = “Individual on-demand” (provided this option is already
    // ONLY pulling products, there should be NO impact).
    $division_value = $entity->get('field_division')->getString();
    $field_value = am_net_is_self_study($division_value);
    $entity->set('field_search_index_on_demand', $field_value);
  }
}
