<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\Component\Utility\Html;
use Drupal\am_net_cpe\EventHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Render\MarkupInterface;

/**
 * Implements template_preprocess_html().
 */
function vscpa_bootstrap_preprocess_html(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('path-' . $path_alias);
  // Check if the current user is administrator.
  $current_user = \Drupal::currentUser();
  $roles = $current_user->getRoles();
  if (in_array('administrator', $roles)) {
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('is_administrator');
  }

  $account = \Drupal::currentUser();
  $roles = $account->getRoles();

  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'role-' . $role;
  }
}

/**
 * Implements template_preprocess_html().
 */
function vscpa_bootstrap_preprocess_node(&$variables) {
  /* @var $node Drupal\node\NodeInterface */
  $node = $variables['node'];
  $field_name = 'field_active_voting_rating';
  if (($node->getType() == 'publication') && ($node->hasField($field_name))) {
    $field_value = $node->get($field_name)->getString();
    if (!($field_value == '1') && isset($variables['content']['field_rating'])) {
      // Hide Voting Rating Field.
      hide($variables['content']['field_rating']);
    }
  }
}

/**
 * Implements template_preprocess_HOOK().
 */
function vscpa_bootstrap_preprocess_commerce_product(&$variables) {
  $view_mode = $variables['elements']['#view_mode'] ?? NULL;
  // Add view mode like node.module does (product.module doesn't).
  $variables['view_mode'] = $view_mode;
  // Add a 'page' flag like node.module does.
  $variables['page'] = ($view_mode == 'full');
  // Get the product.
  $product = $variables['product_entity'];
  // Get the bundle.
  $bundle = $product->bundle();
  // Format event dates.
  if ($bundle == 'cpe_event') {
    $variables['dates'] = EventHelper::preprocessEventDate($product);
    $variables['dates_full'] = EventHelper::preprocessEventDate($product, 'D, m/d/Y');
    // Add Badge class to the event teaser.
    if ($view_mode === 'teaser') {
      $variables['badge_class'] = \Drupal::service('am_net_cpe.product_manager')->getEventBadgeClassByProduct($product);
    }
  }
  // remove/reorder/regroup fields for event-registration.
  // Don't let product variation fields through except for on Cover display.
  if (in_array($bundle, ['cpe_event', 'cpe_self_study'])) {
    // Bundle Info.
    $bundle_info = NULL;
    if ($view_mode === 'full_width') {
      foreach (array_keys($variables['product']) as $field) {
        if (substr($field, 0, 10) === 'variation_' && $field !== 'variation_price') {
          $variables['product'][$field]['#access'] = FALSE;
        }
      }
      $bundle_info = $variables['bundle_info'] ?? NULL;
      unset($variables['bundle_info']);
    }
    else {
      foreach (array_keys($variables['product']) as $field) {
        if (substr($field, 0, 10) === 'variation_') {
          $variables['product'][$field]['#access'] = FALSE;
        }
      }
    }

    if (($variables['view_mode'] === 'teaser') && isset($variables['bundle_info'])) {
      $variables['bundle_icon'] = [
        '#markup' => '<div class="bundle-event-icon-teaser"><div class="bundle-event-icon"></div><span>Package</span></div>',
      ];
    }

    // Sort the price and variations at the bottom.
    $variables['product']['variation_price']['#weight'] = 20;
    $variables['product']['variations']['#weight'] = 21;
    if ($view_mode != 'registration_widget') {
      $variables['product']['variation_price']['#prefix'] = '<div class="product-variations-price-fields-wrapper clearfix">';
      $variables['product']['variations']['#suffix'] = $bundle_info . '</div>';
    }
  }
}

/**
 * Implements template_preprocess_field().
 */
function vscpa_bootstrap_preprocess_field(&$variables) {
  if ($variables['field_name'] == 'field_slides') {

    foreach ($variables['items'] as $idx => $item) {
      $variables['items'][$idx]['content']['#paragraph']->index = $idx;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function vscpa_bootstrap_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'user_login_form') {
    $form['name']['#attributes']['placeholder'] = t('Username or Email Address');
    $form['pass']['#attributes']['placeholder'] = t('Password');
  }
}

/**
 * Implements hook_template_preprocess_input().
 */
function vscpa_bootstrap_preprocess_input(&$variables) {
  if (!(isset($variables['type']) && isset($variables['suffix']) && ($variables['type'] == 'commerce_number'))) {
    return;
  }
  // Alter Suffix to remove currency code.
  $suffix = $variables['suffix'];
  if ($suffix instanceof MarkupInterface) {
    $suffix = str_replace('USD', '', ((string) $suffix));
    $variables['suffix'] = [
      '#type' => 'item',
      '#markup' => $suffix,
    ];
  }
}

/**
 * Add scripts based on path.
 */
function vscpa_bootstrap_preprocess_page(&$variables) {
  $current_path = \Drupal::request()->getRequestUri();
  // Add Voter Voice script to Bill Tracker page.
  if ($current_path == '/BillTracker') {
    $variables['#attached']['library'][] = 'vscpa_bootstrap/bill-tracker';
  }
  elseif ($current_path == '/voter-voice') {
    $variables['#attached']['library'][] = 'vscpa_bootstrap/voter-voice';
  }
}
